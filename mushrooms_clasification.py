# -*- coding: utf-8 -*-
"""mushrooms_clasification

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/mushrooms-clasification-3ac0b8bc-33c1-46ff-9390-30a3986c629d.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20240312/auto/storage/goog4_request%26X-Goog-Date%3D20240312T194808Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D4b5166932e70f1b40fa447adbea0a879e00f289b15053f8581c8fd7af17570fb78c69f060c836a9fb85e27b1bd5c420cf5295337b5ed731081fd3b30ef2186868d59f0b0143fb462328c185be99aef4a13e44a78f2dfe78354da977654280b6a21e88ef3000f9c93a5f94d0ea33eb77baae892e3c9d2e8bbeb8d21e77e4ec62db7b5a627416ff4deaa1965d0470891e4e0954bf74f09e8f2ed7fe6c030fde2929cb1da6bbfaaae096eb8177f1358a7175ed5cacb56ca94fe6ed95d1469d3937f54b44accf29a10de051c554f98bb5f9f6bbb878da6b36b877afba9514782d0e2ccac2079474c9ee9e53a89e1084d4444117bbdeeb6a06235a249464b638f1649
"""

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES
# TO THE CORRECT LOCATION (/kaggle/input) IN YOUR NOTEBOOK,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.

import os
import sys
from tempfile import NamedTemporaryFile
from urllib.request import urlopen
from urllib.parse import unquote, urlparse
from urllib.error import HTTPError
from zipfile import ZipFile
import tarfile
import shutil

CHUNK_SIZE = 40960
DATA_SOURCE_MAPPING = 'mushrooms:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F4586976%2F7827458%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240312%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240312T194808Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D00b9ccd176b8da7628b274d790cc3d7b853a350b9efd07be0aae23c585c5cf6f4f8fe8dccb6a0d41be64858a60a14e68e98c7b9825dc95864c8c9e132e16b4befe4071a96883f841035c4db16d5835488d198799ffd184e28dc736d412e2cd6b63e8c79af6f9a2327f07fd8399d14bc53adf8c3eb44e324181fc7209c77891bd747358cade30b9f0e0ca4c562307e618861a47d837fc2938b0b9ee4b474d33fddf37a80093d9642eede958669e97c2ca9e951250d572aaa39e350c3093817fe894ad63e4ace5b2e063e184a3c2775486b1f30246502038b04072bfe345f3259afc9e63ba191999ae6804d6c69c58b422f6290f1619d358f785b5b49d888a765e'

KAGGLE_INPUT_PATH='/kaggle/input'
KAGGLE_WORKING_PATH='/kaggle/working'
KAGGLE_SYMLINK='kaggle'

!umount /kaggle/input/ 2> /dev/null
shutil.rmtree('/kaggle/input', ignore_errors=True)
os.makedirs(KAGGLE_INPUT_PATH, 0o777, exist_ok=True)
os.makedirs(KAGGLE_WORKING_PATH, 0o777, exist_ok=True)

try:
  os.symlink(KAGGLE_INPUT_PATH, os.path.join("..", 'input'), target_is_directory=True)
except FileExistsError:
  pass
try:
  os.symlink(KAGGLE_WORKING_PATH, os.path.join("..", 'working'), target_is_directory=True)
except FileExistsError:
  pass

for data_source_mapping in DATA_SOURCE_MAPPING.split(','):
    directory, download_url_encoded = data_source_mapping.split(':')
    download_url = unquote(download_url_encoded)
    filename = urlparse(download_url).path
    destination_path = os.path.join(KAGGLE_INPUT_PATH, directory)
    try:
        with urlopen(download_url) as fileres, NamedTemporaryFile() as tfile:
            total_length = fileres.headers['content-length']
            print(f'Downloading {directory}, {total_length} bytes compressed')
            dl = 0
            data = fileres.read(CHUNK_SIZE)
            while len(data) > 0:
                dl += len(data)
                tfile.write(data)
                done = int(50 * dl / int(total_length))
                sys.stdout.write(f"\r[{'=' * done}{' ' * (50-done)}] {dl} bytes downloaded")
                sys.stdout.flush()
                data = fileres.read(CHUNK_SIZE)
            if filename.endswith('.zip'):
              with ZipFile(tfile) as zfile:
                zfile.extractall(destination_path)
            else:
              with tarfile.open(tfile.name) as tarfile:
                tarfile.extractall(destination_path)
            print(f'\nDownloaded and uncompressed: {directory}')
    except HTTPError as e:
        print(f'Failed to load (likely expired) {download_url} to path {destination_path}')
        continue
    except OSError as e:
        print(f'Failed to load {download_url} to path {destination_path}')
        continue

print('Data source import complete.')

import pandas as pd

jamur = pd.read_csv('/kaggle/input/mushrooms/mushrooms.csv')

jamur.info()

jamur.head()

# Memisahkan atribut (fitur) dan label (kelas target)
x = jamur[['cap-shape', 'cap-surface', 'cap-color', 'bruises', 'odor',
          'gill-attachment', 'gill-spacing', 'gill-size', 'gill-color',
          'stalk-shape', 'stalk-root', 'stalk-surface-above-ring',
          'stalk-surface-below-ring', 'stalk-color-above-ring',
          'stalk-color-below-ring', 'veil-type', 'veil-color', 'ring-number',
          'ring-type', 'spore-print-color', 'population', 'habitat']]
y = jamur['class']

# Mencetak bentuk (shape) dari data atribut (x) dan label (y)
print("Bentuk data atribut (x):", x.shape)
print("Bentuk data label (y):", y.shape)

# Melakukan Ordinal Encoding pada fitur kategorikal
from sklearn.preprocessing import OrdinalEncoder
ordinal_encoder = OrdinalEncoder(handle_unknown='use_encoded_value', unknown_value=-1)
x_encoded = ordinal_encoder.fit_transform(x)

# Membagi data menjadi data latih dan data uji
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x_encoded, y, test_size=0.2, random_state=42)

# Mencetak bentuk (shape) dari data latih dan data uji
print("Bentuk data latih (x_train):", x_train.shape)
print("Bentuk data latih (y_train):", y_train.shape)
print("Bentuk data uji (x_test):", x_test.shape)
print("Bentuk data uji (y_test):", y_test.shape)

# Membuat model Decision Tree Classifier
from sklearn.tree import DecisionTreeClassifier
tree_model = DecisionTreeClassifier(random_state=42)

# Melatih model menggunakan data latih
tree_model.fit(x_train, y_train)

# Memprediksi label kelas pada data uji
y_pred = tree_model.predict(x_test)

# Mengevaluasi performa model
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, pos_label='e')
recall = recall_score(y_test, y_pred, pos_label='e')
f1 = f1_score(y_test, y_pred, pos_label='e')

print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("F1-score:", f1)

# Memprediksi label kelas pada data baru dengan input dari pengguna

new_data = []
print("Masukkan fitur-fitur jamur:")
new_data.append([
    input("Cap Shape (b=bell, c=conical, x=convex, f=flat, k=knobbed, s=sunken): "),
    input("Cap Surface (f=fibrous, g=grooves, y=scaly, s=smooth): "),
    input("Cap Color (n=brown, b=buff, c=cinnamon, g=gray, r=green, p=pink, u=purple, e=red, w=white, y=yellow): "),
    input("Bruises (t=bruises, f=no bruises): "),
    input("Odor (a=almond, l=anise, c=creosote, y=fishy, f=foul, m=musty, n=none, p=pungent, s=spicy): "),
    input("Gill Attachment (a=attached, d=descending, f=free, n=notched): "),
    input("Gill Spacing (c=close, w=crowded, d=distant): "),
    input("Gill Size (b=broad, n=narrow): "),
    input("Gill Color (k=black, n=brown, b=buff, h=chocolate, g=gray, r=green, o=orange, p=pink, u=purple, e=red, w=white, y=yellow): "),
    input("Stalk Shape (e=enlarging, t=tapering): "),
    input("Stalk Root (b=bulbous, c=club, u=cup, e=equal, z=rhizomorphs, r=rooted): "),
    input("Stalk Surface Above Ring (f=fibrous, y=scaly, k=silky, s=smooth): "),
    input("Stalk Surface Below Ring (f=fibrous, y=scaly, k=silky, s=smooth): "),
    input("Stalk Color Above Ring (n=brown, b=buff, c=cinnamon, g=gray, o=orange, p=pink, e=red, w=white, y=yellow): "),
    input("Stalk Color Below Ring (n=brown, b=buff, c=cinnamon, g=gray, o=orange, p=pink, e=red, w=white, y=yellow): "),
    input("Veil Type (p=partial, u=universal): "),
    input("Veil Color (n=brown, o=orange, w=white, y=yellow): "),
    input("Ring Number (n=none, o=one, t=two): "),
    input("Ring Type (c=cobwebby, e=evanescent, f=flaring, l=large, n=none, p=pendant, s=sheathing, z=zone): "),
    input("Spore Print Color (k=black, n=brown, b=buff, h=chocolate, r=green, o=orange, u=purple, w=white, y=yellow): "),
    input("Population (a=abundant, c=clustered, n=numerous, s=scattered, v=several, y=solitary): "),
    input("Habitat (g=grasses, l=leaves, m=meadows, p=paths, u=urban, w=waste, d=woods): ")
])
print("")
new_data_encoded = ordinal_encoder.transform(new_data)
predicted_class = tree_model.predict(new_data_encoded)
print("Predicted class:", predicted_class)


# Ekspor grafik pohon keputusan
from sklearn.tree import export_graphviz
export_graphviz(tree_model, out_file="/kaggle/working/jamur(1)_tree.dot",
                feature_names=x.columns,
                class_names=["edible", "poisonous"],
                filled=True, rounded=True,
                special_characters=True)

# Mencetak pesan untuk memeriksa file yang diekspor
print("Grafik pohon keputusan telah diekspor ke /kaggle/working/jamur_tree.dot")

"""**penjelasan tiap fitur**

1.   cap-shape: Bentuk tudung jamur (b = lonceng, c = kerucut, x = cembung, f = datar, k = kenop, s = cekung)
2.  cap-surface: Permukaan tudung jamur (f = berserat, g = berlekuk-lekuk, y = bersisik, s = halus)
3.  cap-color: Warna tudung jamur (n=coklat, b=kulit, c=kayu manis, g=abu-abu, r=hijau, p=merah muda, u=ungu, e=merah, w=putih, y=kuning)
4.  bruises: Keberadaan memar pada jamur (t=memar, f=tidak ada memar)
5.  odor: Bau jamur (a = almond, l = adas manis, c = creosote, y = amis, f = busuk, m = pengap, n = tidak ada, p = menyengat, s = pedas)
6.  gill-attachment: Pelekatan insang pada batang (a=terlekat, d=menurun, f=bebas, n=tidak berlekuk)
7.  gill-spacing: Jarak antar insang (c=dekat, w=ramai, d=jauh)
8.  gill-size: Ukuran insang (b = lebar, n = sempit)
9.  gill-color: Warna insang (k=hitam, n=coklat, b=kuning, h=coklat, g=abu-abu, r=hijau, o=jingga, p=jingga, u=ungu, e=merah, w=putih, y=kuning)
10. stalk-shape: Bentuk batang (e=membesar, t=meruncing)
11. stalk-root: Tipe akar pada batang (b = bulat, c = gada, u = cawan, e = sama, z = rhizomorf, r = berakar)
12. stalk-surface-above-ring: Permukaan batang di atas cincin (f = berserat, y = bersisik, k = halus, s = licin)
13. stalk-surface-below-ring: Permukaan batang di bawah cincin (f = berserat, y = bersisik, k = halus, s = halus)
14. stalk-color-above-ring: Warna batang di atas cincin (n=coklat, b=kulit, c=kayu manis, g=abu-abu, o=jingga, p=merah muda, e=merah, w=putih, y=kuning)
15. stalk-color-below-ring: Warna batang di bawah cincin (n=brown, b=buff, c=cinnamon, g=gray, o=orange, p=pink, e=red, w=white, y=yellow)
16. veil-type: Jenis cadar (p = parsial, u = universal)
17. veil-color: Warna cadar (n=coklat, o=jingga, w=putih, y=kuning)
18. ring-number: Jumlah cincin (n = tidak ada, o = satu, t = dua)
19. ring-type: Tipe cincin (c = sarang laba-laba, e = evanescent, f = melebar, l = besar, n = tidak ada, p = liontin, s = selubung, z = zona)
20. spore-print-color: Warna cetakan spora (k=hitam, n=coklat, b=kuning, h=coklat, r=hijau, o=jingga, u=ungu, w=putih, y=kuning)
21. population: Populasi jamur (a=melimpah, c=berkelompok, n=banyak, s=terpencar, v=beberapa, y=soliter)
22. habitat: Habitat jamur (g=rumput, l=daun, m=padang rumput, p=jalan setapak, u=perkotaan, w=sampah, d=hutan)

[[](http://)](http://)
"""